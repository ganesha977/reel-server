// import { Heart, Home, LogOut, MessageCircle, PlusSquare, Search, TrendingUp } from 'lucide-react';
// import React, { useState } from 'react';
// import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';
// import { toast } from 'sonner';
// import axios from 'axios';
// import { useNavigate } from 'react-router-dom';
// import { useDispatch, useSelector } from 'react-redux';
// import { setAuthUser } from '@/redux/authSlice';
// import CreatePost from './CreatePost';
// import { setPosts, setSelectedPost } from '@/redux/postSlice';
// import { Popover, PopoverContent, PopoverTrigger } from './ui/popover';
// import { Button } from './ui/button';

// const LeftSidebar = () => {
//   const navigate = useNavigate();
//   const { user } = useSelector((store) => store.auth);
//   const { likeNotification } = useSelector((store) => store.realTimeNotification);
//   const { messageNotification } = useSelector((store) => store.messageNotification);
//   const dispatch = useDispatch();
//   const [open, setOpen] = useState(false);

//   const logoutHandler = async () => {
//     try {
//       const res = await axios.get('http://localhost:7777/api/v1/user/logout', {
//         withCredentials: true,
//       });
//       if (res.data.success) {
//         dispatch(setAuthUser(null));
//         dispatch(setSelectedPost(null));
//         dispatch(setPosts([]));
//         navigate('/login');
//         toast.success(res.data.message);
//       }
//     } catch (error) {
//       toast.error(error.response?.data?.message || 'Logout failed');
//     }
//   };

//   const sidebarHandler = (textType) => {
//     if (textType === 'Logout') {
//       logoutHandler();
//     } else if (textType === 'Create') {
//       setOpen(true);
//     } else if (textType === 'Profile') {
//       navigate(`/profile/${user?._id}`);
//     } else if (textType === 'Home') {
//       navigate('/');
//     } else if (textType === 'Messages') {
//       navigate('/chat');
//     }
//     else if (textType === 'Notifications') {
//       navigate('/notifications');
//     }
    
    
//   };

//   const sidebarItems = [
//     { icon: <Home />, text: 'Home' },
//     { icon: <Search />, text: 'Search' },
//     { icon: <TrendingUp />, text: 'Explore' },
//     { icon: <MessageCircle />, text: 'Messages' },
//     { icon: <Heart />, text: 'Notifications' },
//     { icon: <PlusSquare />, text: 'Create' },
//     {
//       icon: (
//         <Avatar className="w-6 h-6">
//           <AvatarImage src={user?.profilePicture} alt="@shadcn" />
//           <AvatarFallback>CN</AvatarFallback>
//         </Avatar>
//       ),
//       text: 'Profile',
//     },
//     { icon: <LogOut />, text: 'Logout' },
//   ];

//   return (
//     <div className="fixed top-0 z-10 left-0 px-4 border-r border-gray-300 w-[16%] h-screen">
//       <div className="flex flex-col">
//         <h1 className="my-8 pl-3 font-bold text-xl">LOGO</h1>
//         <div>
//           {sidebarItems.map((item, index) => (
//             <div
//               onClick={() => sidebarHandler(item.text)}
//               key={index}
//               className="flex items-center gap-3 relative hover:bg-gray-100 cursor-pointer rounded-lg p-3 my-3"
//             >
//               {item.icon}
//               <span>{item.text}</span>

//               {/* Like Notification Badge */}
//               {item.text === 'Notifications' && likeNotification?.length > 0 && (
//                 <Popover>
//                   <PopoverTrigger asChild>
//                     <Button
//                       size="icon"
//                       className="rounded-full h-5 w-5 bg-red-600 hover:bg-red-600 absolute bottom-6 left-6"
//                     >
//                       {likeNotification.length}
//                     </Button>
//                   </PopoverTrigger>
//                   <PopoverContent>
//                     <div>
//                       {likeNotification.map((notification) => (
//                         <div key={notification.userId} className="flex items-center gap-2 my-2">
//                           <Avatar>
//                             <AvatarImage src={notification.userDetails?.profilePicture} />
//                             <AvatarFallback>CN</AvatarFallback>
//                           </Avatar>
//                           <p className="text-sm">
//                             <span className="font-bold">{notification.userDetails?.username}</span>{' '}
//                             liked your post
//                           </p>
//                         </div>
//                       ))}
//                     </div>
//                   </PopoverContent>
//                 </Popover>
//               )}

//               {/* Message Notification Badge */}
//               {item.text === 'Messages' && messageNotification?.length > 0 && (
//                 <Popover>
//                   <PopoverTrigger asChild>
//                     <Button
//                       size="icon"
//                       className="rounded-full h-5 w-5 bg-red-600 hover:bg-red-600 absolute bottom-6 left-6"
//                     >
//                       {messageNotification.length}
//                     </Button>
//                   </PopoverTrigger>
//                   <PopoverContent>
//                     <div>
//                       {messageNotification.map((notification) => (
//                         <div key={notification.userId} className="flex items-center gap-2 my-2">
//                           <Avatar>
//                             <AvatarImage src={notification.userDetails?.profilePicture} />
//                             <AvatarFallback>CN</AvatarFallback>
//                           </Avatar>
//                           <p className="text-sm">
//                             <span className="font-bold">{notification.userDetails?.username}</span>{' '}
//                             sent you a message
//                           </p>
//                         </div>
//                       ))}
//                     </div>
//                   </PopoverContent>
//                 </Popover>
//               )}
//             </div>
//           ))}
//         </div>
//       </div>

//       <CreatePost open={open} setOpen={setOpen} />
//     </div>
//   );
// };

// export default LeftSidebar;














//chat page 




import React, { useEffect, useRef, useState } from "react";
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { setSelectedUser } from "@/redux/authSlice";
import { useDispatch, useSelector } from "react-redux";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { MessageCircleCode } from "lucide-react";
import Messages from "./Messages";
import axios from "axios";
import { setMessages } from "@/redux/chatSlice";

const ChatPage = () => {
  const { onlineUsers,messages } = useSelector((store) => store.chat);

  const { user, suggestedUsers, selectedUser } = useSelector(
    (store) => store.auth
  );
  const dispatch = useDispatch();
const [textMessage,settextMessage]=useState('');




 const sendmsg = async (receiverId) => {
  try {
    if (!textMessage.trim()) return; // prevent sending empty message

    const res = await axios.post(
      `http://localhost:7777/api/v1/message/send/${receiverId}`,
      { textMessage },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        withCredentials: true,
      }
    );

    if (res.data.success) {
      dispatch(setMessages([...messages, res.data.newMessage]));
      settextMessage(''); // clear input
    }
  } catch (error) {
    console.error("Send Message Error:", error);
  }
};


  useEffect(() => {

    return () => {
      dispatch(setSelectedUser(null))
    };
  }, []);

  return (
    <div className="flex ml-[16%] h-screen">
      <section className="w-full my-8  md:w-1/4">
        <h1 className="font-bold px-3   mb-4  text-xl">{user?.username}</h1>
        <hr className="mb-4  border-gray-300" />
        <div className="overflow-y-auto h-[80vh]">
          {suggestedUsers?.map((suggestedUser) => {
            const isOnline = onlineUsers.includes(suggestedUser?._id);

            return (
              <div
                onClick={() => dispatch(setSelectedUser(suggestedUser))}
                className="flex gap-3 items-center p-3  hover:bg-50 cursor-pointer"
              >
                <Avatar className="w-14 h-14">
                  <AvatarImage src={suggestedUser?.profilePicture} />
                  <AvatarFallback>Fn</AvatarFallback>
                </Avatar>
                <div className="flex flex-col">
                  <span className="font font-medium">
                    {suggestedUser?.username}
                  </span>
                  <span
                    className={`text-xs ${
                      isOnline ? "text-green-600" : "text-red-600"
                    }`}
                  >
                    {isOnline ? "online" : "offline"}
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      </section>

      {selectedUser ? (
        <section className="flex-1 border-l border-l-grey-300   flex  flex-col h-full">
          <div className="flex gap-3  items-center px-3 py-2  border-b border-gray-300 sticky top-0 bg-white z-10">
            <Avatar>
              <AvatarImage src={selectedUser?.profilePicture} />
              <AvatarFallback>Fn</AvatarFallback>
            </Avatar>
            <div className="flex flex-col">
              <span>{selectedUser?.username}</span>
            </div>
          </div>
          <Messages selectedUser={selectedUser} />
          <div className="flex items-center p-4 border-t-grey-300">
            <Input
              type="text"
              value={textMessage}
              onChange={(e) => settextMessage(e.target.value)}
              className="flex-1 mr-2 focus-visible:ring-transparent"
              placeholder="messages"
            />
            <Button    onClick={()=>sendmsg(selectedUser?._id)} >send</Button>
          </div>
        </section>
      ) : (
        <div className="flex flex-col items-center justify-center mx-auto">
          <MessageCircleCode className="w-32 h-32 my-4" />
          <h1 className="font-medium text-xl">your messages</h1>
          <span>send your message</span>
        </div>
      )}
    </div>
  );
};

export default ChatPage;






///rellls


import React, { useEffect, useRef, useState } from 'react';
import {
  Heart, MessageCircle, Send, Bookmark, Volume2, VolumeX, MoreHorizontal
} from 'lucide-react';
import { useDispatch, useSelector } from 'react-redux';
import useGetAllReels from '@/hooks/useGetAllReels';
import { toast } from 'sonner';
import axios from 'axios';
import { setReels, setSelectedReel } from '@/redux/reelSlice';
import { Link } from 'react-router-dom';
import ReelCommentDialog from './ReelCommentDialog ';

const ReelsPage = () => {
  const reelsContainerRef = useRef(null);
  const videoRefs = useRef([]);
  const dispatch = useDispatch();
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isMuted, setIsMuted] = useState(false); // Changed to false for sound
  const [commentTexts, setCommentTexts] = useState({});
  const [commentDialogOpen, setCommentDialogOpen] = useState(false);
  const [followingStates, setFollowingStates] = useState({});
  
  const { reels } = useSelector((state) => state.reel);
  const { user } = useSelector((state) => state.auth);

  useGetAllReels(); // Fetch on mount

  // Initialize following states
  useEffect(() => {
    if (reels && user) {
      const initialFollowingStates = {};
      reels.forEach(reel => {
        if (reel.author && reel.author.followers) {
          initialFollowingStates[reel.author._id] = reel.author.followers.includes(user._id);
        }
      });
      setFollowingStates(initialFollowingStates);
    }
  }, [reels, user]);

  // Enhanced scroll detection for proper video switching
  const handleScroll = () => {
    const container = reelsContainerRef.current;
    if (!container) return;

    const scrollTop = container.scrollTop;
    const containerHeight = container.clientHeight;
    
    // Calculate which video should be playing based on scroll position
    const newIndex = Math.round(scrollTop / containerHeight);
    
    if (newIndex !== currentIndex && newIndex >= 0 && newIndex < reels.length) {
      setCurrentIndex(newIndex);
      
      // Stop all videos first
      videoRefs.current.forEach((video, index) => {
        if (video) {
          video.pause();
          video.currentTime = 0;
        }
      });
      
      // Play the current video
      const currentVideo = videoRefs.current[newIndex];
      if (currentVideo) {
        currentVideo.currentTime = 0;
        currentVideo.muted = isMuted;
        currentVideo.play().catch(console.error);
      }
    }
  };

  useEffect(() => {
    const container = reelsContainerRef.current;
    if (container) {
      container.addEventListener("scroll", handleScroll, { passive: true });
      return () => container.removeEventListener("scroll", handleScroll);
    }
  }, [currentIndex, reels.length]);

  // Auto-play first video on load
  useEffect(() => {
    if (reels.length > 0 && videoRefs.current[0]) {
      setTimeout(() => {
        const firstVideo = videoRefs.current[0];
        firstVideo.muted = isMuted;
        firstVideo.play().catch(console.error);
      }, 100);
    }
  }, [reels]);

  // Update all videos mute state when toggled
  useEffect(() => {
    videoRefs.current.forEach((video) => {
      if (video) {
        video.muted = isMuted;
      }
    });
  }, [isMuted]);

  const formatCount = (count) => {
    if (!count || isNaN(count)) return '0';
    if (count >= 1e6) return `${(count / 1e6).toFixed(1)}M`;
    if (count >= 1e3) return `${(count / 1e3).toFixed(1)}K`;
    return count.toString();
  };

  const likeOrDislikeHandler = async (reel) => {
    const liked = reel.likes.includes(user._id);
    const action = liked ? "dislike" : "like";
    try {
      const res = await axios.post(
        `http://localhost:7777/api/v1/reel/${action}/${reel._id}`,
        {},
        { withCredentials: true }
      );
      if (res.data.success) {
        const updatedData = reels.map(r =>
          r._id === reel._id
            ? {
                ...r,
                likes: liked
                  ? r.likes.filter(id => id !== user._id)
                  : [...r.likes, user._id],
              }
            : r
        );
        dispatch(setReels(updatedData));
        toast.success(res.data.message);
      }
    } catch (error) {
      console.error(error);
      toast.error("Something went wrong");
    }
  };

  const commentHandler = async (reel, text) => {
    try {
      const res = await axios.post(
        `http://localhost:7777/api/v1/reel/comment/${reel._id}`,
        { text },
        {
          headers: { 'Content-Type': 'application/json' },
          withCredentials: true
        }
      );
      if (res.data.success) {
        const updatedReels = reels.map(r =>
          r._id === reel._id
            ? { ...r, comments: [...r.comments, res.data.comment] }
            : r
        );
        dispatch(setReels(updatedReels));
        toast.success(res.data.message);
        setCommentTexts(prev => ({ ...prev, [reel._id]: "" }));
      }
    } catch (error) {
      toast.error("Comment failed");
    }
  };

  const bookmarkHandler = async (reel) => {
    try {
      const res = await axios.get(
        `http://localhost:7777/api/v1/reel/${reel._id}/bookmark`,
        { withCredentials: true }
      );
      if (res.data.success) toast.success(res.data.message);
    } catch (error) {
      toast.error("Bookmark failed");
    }
  };

const followOrUnfollowHandler = async (authorId) => {
  try {
    const res = await axios.post(
      `http://localhost:7777/api/v1/user/followorunfollow/${authorId}`,
      {},
      { withCredentials: true }
    );

    if (res.data.success) {
      const msg = res.data.message;
      // Set state based on real backend message
      setFollowingStates(prev => ({
        ...prev,
        [authorId]: msg.includes("Followed")
      }));
      toast.success(msg);
    }
  } catch (error) {
    console.log("Follow/Unfollow error", error);
    toast.error(error?.response?.data?.message || "Action failed");
  }
};

  const openCommentDialog = (reel) => {
    dispatch(setSelectedReel(reel));
    setCommentDialogOpen(true);
  };

  const setCommentText = (reelId, text) => {
    setCommentTexts(prev => ({ ...prev, [reelId]: text }));
  };

  const getCommentText = (reelId) => {
    return commentTexts[reelId] || '';
  };

  if (!reels || reels.length === 0) {
    return (
      <div className="h-screen flex items-center justify-center bg-black text-white">
        <div className="text-center">
          <div className="text-lg font-medium mb-2">No reels available</div>
          <div className="text-sm text-gray-400">Check back later for new content</div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen w-full bg-black flex items-center justify-center">
      {/* Desktop: Centered container, Mobile: Full width */}
      <div className="relative h-full w-full md:w-[400px] md:max-w-[400px] overflow-hidden">
        <div
          className="h-full w-full overflow-y-scroll snap-y snap-mandatory scrollbar-hide"
          ref={reelsContainerRef}
          style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
        >
          {reels.map((reel, index) => {
            const isLiked = reel.likes.includes(user._id);
            const currentText = getCommentText(reel._id);

            return (
              <div
                key={reel._id}
                className="h-full w-full snap-start relative bg-black text-white flex items-center justify-center"
              >
                {/* Video */}
                <video
                  ref={(el) => (videoRefs.current[index] = el)}
                  src={reel.video}
                  muted={isMuted}
                  loop
                  playsInline
                  className="absolute inset-0 w-full h-full object-cover"
                />

                {/* Gradient Overlays */}
                <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-black/30 z-10" />

                {/* Volume Control - Top Right */}
                <button
                  onClick={() => setIsMuted((prev) => !prev)}
                  className="absolute top-4 right-4 p-2 bg-black/50 rounded-full z-20 backdrop-blur-sm transition-all duration-200 hover:bg-black/70"
                >
                  {isMuted ? (
                    <VolumeX className="w-5 h-5 text-white" />
                  ) : (
                    <Volume2 className="w-5 h-5 text-white" />
                  )}
                </button>

                {/* Right Side Actions - Properly Aligned */}
                <div className="absolute right-3 bottom-20 space-y-6 z-20">
                  {/* Profile Picture with Plus */}
                  <div className="flex flex-col items-center">
                    <div className="relative">
                      <Link to={`/profile/${reel.author?._id}`}>
                        <img
                          src={reel.author?.profilePicture}
                          alt="profile"
                          className="w-12 h-12 rounded-full border-2 border-white cursor-pointer hover:scale-105 transition-transform"
                        />
                      </Link>
                     {user?._id !== reel.author?._id && reel.author?._id && (
  <button 
    onClick={() => followOrUnfollowHandler(reel.author._id)}
    className={`text-xs px-3 py-1 rounded-md font-medium transition-colors ${
      followingStates[reel.author._id]
        ? 'text-white border border-white/50 hover:bg-white/10'
        : 'text-white border border-white/50 hover:bg-white/10'
    }`}
  >
    {followingStates[reel.author._id] === undefined
      ? '...'
      : followingStates[reel.author._id]
      ? 'Following'
      : 'Follow'}
  </button>
)}

                    </div>
                  </div>

                  {/* Like Button */}
                  <button 
                    onClick={() => likeOrDislikeHandler(reel)}
                    className="flex flex-col items-center space-y-1 group"
                  >
                    <div className="p-2 rounded-full transition-transform group-active:scale-95">
                      <Heart 
                        className={`w-7 h-7 transition-colors duration-200 ${
                          isLiked ? 'text-red-500 fill-red-500' : 'text-white'
                        }`} 
                      />
                    </div>
                    <span className="text-xs font-medium text-white">
                      {formatCount(reel.likes.length)}
                    </span>
                  </button>

                  {/* Comment Button */}
                  <button 
                    onClick={() => openCommentDialog(reel)}
                    className="flex flex-col items-center space-y-1 group"
                  >
                    <div className="p-2 rounded-full transition-transform group-active:scale-95">
                      <MessageCircle className="w-7 h-7 text-white" />
                    </div>
                    <span className="text-xs font-medium text-white">
                      {formatCount(reel.comments.length)}
                    </span>
                  </button>

                  {/* Share Button */}
                  <div className="flex flex-col items-center space-y-1">
                    <div className="p-2 rounded-full">
                      <Send className="w-7 h-7 text-white" />
                    </div>
                    <span className="text-xs font-medium text-white">Share</span>
                  </div>

                  {/* Bookmark Button */}
                  <button 
                    onClick={() => bookmarkHandler(reel)}
                    className="flex flex-col items-center group"
                  >
                    <div className="p-2 rounded-full transition-transform group-active:scale-95">
                      <Bookmark className="w-7 h-7 text-white" />
                    </div>
                  </button>

                  {/* More Options */}
                  <button className="flex flex-col items-center group">
                    <div className="p-2 rounded-full transition-transform group-active:scale-95">
                      <MoreHorizontal className="w-7 h-7 text-white" />
                    </div>
                  </button>
                </div>

                {/* Bottom Content */}
                <div className="absolute bottom-0 left-0 right-0 p-4 z-20">
                  <div className="max-w-[calc(100%-80px)]">
                    {/* User Info */}
                    <div className="flex items-center gap-3 mb-3">
                      <Link to={`/profile/${reel.author?._id}`}>
                        <img
                          src={reel.author?.profilePicture}
                          alt="profile"
                          className="w-8 h-8 rounded-full border border-white/30 cursor-pointer hover:scale-105 transition-transform"
                        />
                      </Link>
                      <div className="flex items-center gap-2">
                        <Link to={`/profile/${reel.author?._id}`}>
                          <span className="text-sm font-semibold text-white hover:underline cursor-pointer">
                            @{reel.author?.username}
                          </span>
                        </Link>
                        {user?._id !== reel.author?._id && (
                          <button 
                            onClick={() => followOrUnfollowHandler(reel.author?._id)}
                            className={`text-xs px-3 py-1 rounded-md font-medium transition-colors ${
                              followingStates[reel.author?._id]
                                ? 'text-white border border-white/50 hover:bg-white/10'
                                : 'text-white border border-white/50 hover:bg-white/10'
                            }`}
                          >
                            {followingStates[reel.author?._id] ? 'Following' : 'Follow'}
                          </button>
                        )}
                      </div>
                    </div>

                    {/* Caption */}
                    <p className="text-sm text-white mb-4 leading-relaxed">
                      {reel.caption}
                    </p>

                    {/* Comment Input */}
                    <div className="flex items-center gap-3">
                      <img
                        src={user?.profilePicture}
                        alt="your profile"
                        className="w-6 h-6 rounded-full"
                      />
                      <input
                        value={currentText}
                        onChange={(e) => setCommentText(reel._id, e.target.value)}
                        placeholder="Add a comment..."
                        className="bg-transparent text-white text-sm flex-1 outline-none placeholder-gray-400 border-b border-gray-600 pb-1"
                      />
                      {currentText.trim() && (
                        <button
                          onClick={() => commentHandler(reel, currentText)}
                          className="text-blue-400 font-semibold text-sm hover:text-blue-300 transition-colors"
                        >
                          Post
                        </button>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Custom Scrollbar Styles */}
        <style jsx>{`
          .scrollbar-hide::-webkit-scrollbar {
            display: none;
          }
          .scrollbar-hide {
            -ms-overflow-style: none;
            scrollbar-width: none;
          }
        `}</style>
      </div>

      {/* Comment Dialog */}
      <ReelCommentDialog 
        open={commentDialogOpen} 
        setOpen={setCommentDialogOpen} 
      />
    </div>
  );
};

export default ReelsPage;




const getprofile = async (req, res) => {
  try {
    const userId = req.params.id;

    const user = await User.findById(userId)
      .select("-password")
      .populate({
        path: "posts",
        options: { sort: { createdAt: -1 } },
        populate: {
          path: "author",
          select: "username profilePicture",
        },
      })
      .populate({
        path: "reels", // ✅ Only user's own uploaded reels
        model: "Reel",
        options: { sort: { createdAt: -1 } },
        populate: {
          path: "author",
          select: "username profilePicture",
        },
      });

    if (!user) {
      return res.status(404).json({
        message: "User not found",
        success: false,
      });
    }

    return res.status(200).json({
      user,
      message: "User profile fetched successfully",
      success: true,
    });

  } catch (error) {
    console.error(error);
    return res.status(500).json({
      message: "Profile fetch failed",
      error,
      success: false
    });
  }
};